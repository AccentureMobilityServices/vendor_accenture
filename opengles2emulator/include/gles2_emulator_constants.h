/*
**
** Copyright 2011, Accenture Ltd
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/

#ifndef GLES2_EMULATOR_CONSTANTS_H_
#define GLES2_EMULATOR_CONSTANTS_H_


//Unique identifier used for each buffer sent to/from host
#define GLES2_DEVICE_HEADER 0x4703F322

// Virtual device ID
#define theVirtualDeviceFilename "/dev/virtual_device"
#define theVirtualDeviceIOCTLFilename "/dev/virtual_device_control"
#define theVirtualDeviceExchangeFilename "/dev/virtual_device_exchange"

// Size of socket buffer sizes for send and receive
#define SOCKET_SNDBUF_SIZE 64*1024
#define SOCKET_RCVBUF_SIZE 64*1024 

// Command Buffer - These buffers are used to pass command data to/from OpenGLES2 Android library
#define CommandBufferSize 4096
#define NumberCommandBuffers 2

/* IRQ function command list. Must match between Android and QEMU */
enum sharedBuffer_commands {
	VIRTUALDEVICE_INT_STATUS	= 0,
	VIRTUALDEVICE_INITIALISE = 8,
	SET_INPUT_BUFFER_1_ADDRESS = 12,
	SET_INPUT_BUFFER_2_ADDRESS = 16,
	SET_OUTPUT_BUFFER_1_ADDRESS = 20,
	SET_OUTPUT_BUFFER_2_ADDRESS = 24,
	VIRTUALDEVICE_INPUT_BUFFER_1_AVAILABLE = 28,
	VIRTUALDEVICE_INPUT_BUFFER_2_AVAILABLE = 32,
	VIRTUALDEVICE_OUTPUT_BUFFER_1_AVAILABLE = 36,
	VIRTUALDEVICE_OUTPUT_BUFFER_2_AVAILABLE = 40,
	VIRTUALDEVICE_START_INPUT = 44,
	VIRTUALDEVICE_HOST_COMMAND_REGION_WRITE_DONE = 56,
	VIRTUALDEVICE_IOCTL_REGION_PHYSICAL_ADDR_START = 64,
};

/* IRQ signal flags.  Must match between Android and QEMU */
enum sharedBuffer_interrupt_signals {
	VIRTUALDEVICE_INT_INPUT_BUFFER_1_FULL = 1U << 0,
	VIRTUALDEVICE_INT_INPUT_BUFFER_2_FULL = 1U << 1,
	VIRTUALDEVICE_INT_OUTPUT_BUFFER_1_EMPTY = 1U << 2,
	VIRTUALDEVICE_INT_OUTPUT_BUFFER_2_EMPTY = 1U << 3,
};

enum sharedBuffer_interrupt_mask {
	VIRTUALDEVICE_INT_MASK = VIRTUALDEVICE_INT_INPUT_BUFFER_1_FULL |  VIRTUALDEVICE_INT_INPUT_BUFFER_2_FULL |
	VIRTUALDEVICE_INT_OUTPUT_BUFFER_1_EMPTY |  VIRTUALDEVICE_INT_OUTPUT_BUFFER_2_EMPTY,
};

typedef enum _pixel_format {
	EGL_COLOR_INDEX=0x00000001,
	EGL_STENCIL_INDEX,
	EGL_DEPTH_COMPONENT,
	EGL_RED,
        EGL_GREEN,
	EGL_BLUE,
	EGL_ALPHA,
	EGL_RGB,
	EGL_RGBA,
	EGL_LUMINANCE,
	EGL_LUMINANCE_ALPHA
} pixel_format;

typedef enum _pixel_type {
	    EGL_UNSIGNED_BYTE = 0x00000001,
	    EGL_BYTE,
	    EGL_BITMAP,
	    EGL_UNSIGNED_SHORT,
	    EGL_SHORT,
	    EGL_UNSIGNED_INT,
	    EGL_INT,
	    EGL_FLOAT,
	    EGL_UNSIGNED_BYTE_3_3_2,
	    EGL_UNSIGNED_BYTE_2_3_3_REV,
	    EGL_UNSIGNED_SHORT_5_6_5,
	    EGL_UNSIGNED_SHORT_5_6_5_REV,
	    EGL_UNSIGNED_SHORT_4_4_4_4,
	    EGL_UNSIGNED_SHORT_4_4_4_4_REV,
	    EGL_UNSIGNED_SHORT_5_5_5_1,
	    EGL_UNSIGNED_SHORT_1_5_5_5_REV,
	    EGL_UNSIGNED_INT_8_8_8_8,
	    EGL_UNSIGNED_INT_8_8_8_8_REV,
	    EGL_UNSIGNED_INT_10_10_10_2,
	    EGL_UNSIGNED_INT_2_10_10_10_REV
} pixel_type;

typedef struct _Eglsurface_desc
{
      int egl14command;
      int pid;
      int phyaddr;
      int virtaddr;
      int width;
      int height;
      pixel_format pixelformat;
      pixel_type pixeltype;
} Eglsurface_desc;

enum command_type{
GLES11 = 0x00000001,
GLES20,
EGL14
};

enum virtual_function{
	GLCLEAR = 0x00000001,
	GLCLEARCOLORX,
	GLCLEARCOLORF,
	GLCREATEPROGRAM,
	GLCREATESHADER,
	GLSHADERSOURCE,
	GLUSEPROGRAM,
	GLVERTEXATTRIBPOINTER,
	GLENABLEVERTEXATTRIBARRAY,
	GLATTACHSHADER,
	GLLINKPROGRAM,
	GLGETPROGRAMIV,
	GLGETPROGRAMINFOLOG,
	GLDELETEPROGRAM,
	GLGETATTRIBLOCATION,
	GLCOMPILESHADER,
	GLGETSHADERIV,
	GLGETSHADERINFOLOG,
	GLDELETESHADER,
	GLCLEARDEPTHF,
	GLCLEARDSTENCIL,
	GLDRAWARRAYS,
	GLDRAWELEMENTS,
	GLGETUNIFORMLOCATION,
	GLUNIFORM3FV,
	GLUNIFORMMATRIX4FV,
	GLVIEWPORT,
	GLENABLE,
	GLDISABLE,
	GLBLENDCOLOR,
	GLBLENDEQUATION,
	GLBLENDEQUATIONSEPARATE,
	GLBLENDFUNC,
	GLBLENDFUNCSEPARATE,
	GLBINDATTRIBLOCATION,
	GLGENTEXTURES,
	GLACTIVETEXTURE,
	GLBINDTEXTURE,
	GLFRAMEBUFFERTEXTURE2D,
	GLISTEXTURE,
	GLDELETETEXTURES,
	GLBUFFERDATA,
	GLBUFFERSUBDATA,
	GLCHECKFRAMEBUFFERSTATUS,
	GLBINDBUFFER,
	GLBINDFRAMEBUFFER,
	GLBINDRENDERBUFFER,
	GLCOLORMASK,
	GLCOMPRESSEDTEXIMAGE2D,
	GLCOMPRESSEDTEXSUBIMAGE2D,
	GLCOPYTEXIMAGE2D,
	GLCOPYTEXSUBIMAGE2D,
	GLDELETEBUFFERS,
	GLDELETEFRAMEBUFFERS,
	GLDELETERENDERBUFFERS,
	GLDEPTHFUNC,
	GLDEPTHMASK,
	GLDEPTHRANGEF,
	GLDETACHSHADER,
	GLFRAMEBUFFERRENDERBUFFER,
	GLGENERATEMIPMAP,
	GLISBUFFER,
	GLISENABLED,
	GLISFRAMEBUFFER,
	GLISPROGRAM,
	GLISRENDERBUFFER,
	GLISSHADER,
	GLLINEWIDTH,
	GLPIXELSTOREI,
	GLPOLYGONOFFSET,
	GLRELEASESHADERCOMPILER,
	GLRENDERBUFFERSTORAGE,
	GLSCISSOR,
	GLSTENCILMASK,
	GLSTENCILMASKSEPARATE,
	GLSTENCILOP,
	GLSTENCILOPSEPARATE,
	GLTEXPARAMETERF,
	GLTEXPARAMETERI,
	GLUNIFORM1F,
	GLUNIFORM1I,
	GLUNIFORM2F,
	GLUNIFORM2I,
	GLUNIFORM3F,
	GLUNIFORM3I,
	GLUNIFORM4F,
	GLUNIFORM4I,
	GLVALIDATEPROGRAM,
	GLVERTEXATTRIB1F,
	GLVERTEXATTRIB2F,
	GLVERTEXATTRIB3F,
	GLVERTEXATTRIB4F,
	GLCLEARDEPTHX,
	GLCULLFACE,
	GLFRONTFACE,
	GLHINT,
	GLFINISH,
	GLSAMPLECOVERAGE,
	GLSAMPLECOVERAGEX,
	GLSTENCILFUNCSEPARATE,
	GLSHADERBINARY,
	GLUNIFORM1FV,
	GLUNIFORM1IV,
	GLUNIFORM2FV,
	GLUNIFORM2IV,
	GLUNIFORM4FV,
	GLUNIFORM3IV,
	GLUNIFORM4IV,
	GLSTENCILFUNC,
	GLFLUSH,
	GLGENBUFFERS,
	GLGENFRAMEBUFFERS,
	GLGENRENDERBUFFERS,
	GLUNIFORMMATRIX2FV,
	GLUNIFORMMATRIX3FV,
	GLVERTEXATTRIB1FV,
	GLVERTEXATTRIB2FV,
	GLVERTEXATTRIB3FV,
	GLVERTEXATTRIB4FV,
	GLGETERROR,
	GLGETBOOLEANV,
	GLGETACTIVEATTRIB,
	GLGETACTIVEUNIFORM,
	GLGETATTACHEDSHADERS,
	GLGETBUFFERPARAMETERIV,
	GLGETFLOATV,
	GLGETFRAMEBUFFERATTACHMENTPARAMETERIV,
	GLGETINTEGERRV,
	GLGETRENDERBUFFERPARAMETERIV,
	GLGETSHADERPRECISIONFORMAT,
	GLGETSHADERSOURCE,
	GLGETTEXPARAMETERFV,
	GLGETTEXPARAMETERIV,
	GLGETUNIFORMFV,
	GLGETUNIFORMIV,
	GLGETVERTEXATTRIBFV,
	GLGETVERTEXATTRIBIV,
	GLGETVERTEXATTRIBPOINTERRV,
	GLTEXIMAGE2D,
	GLTEXSUBIMAGE2D,
	GLREADPIXELS,
	GLTEXPARAMETERFV,
	GLTEXPARAMETERIV,
};


enum egl_commands {
	EGL_SURFACE = 1,
	EGL_DESTROYCONTEXT =2,
	EGL_SYNC = 3
};

struct command_control
{
	int virtualDeviceMagicNumber;
    int length;      // the payload size
	int sequenceNumber; //debugging
	int command;	// enum command_type
	int context;	// unique id of the context - currently the context pointer
	int returnVal;	// pointer to address for return value - NULL if no return Value
	int glFunction;
};


#endif
